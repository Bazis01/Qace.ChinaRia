
plugins {
    id 'java-library'
    id('io.qameta.allure') version '2.11.2'
}

allure {
    report { //секция репорта
        version("2.21.0")
    }
    adapter { //отвечает за появление папочки build/allure-results
        aspectjWeaver.set(true)//Обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set("2.21.0")//версия интеграции фреймворка и Allure
            }
        }
    }
}



group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def selenideVersion = "6.13.0",
    restAssuredVersion = "5.3.0",
    allureVersion = "2.21.0",
    slf4jVersion = "2.0.7"

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation (
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "com.github.javafaker:javafaker:1.0.2",
            "org.junit.jupiter:junit-jupiter-api:5.9.2",
            'com.codeborne:pdf-test:1.8.1',
            'com.codeborne:xls-test:1.7.0',
            "com.opencsv:opencsv:5.7.1",
            "com.google.code.gson:gson:2.10.1",
            'com.fasterxml.jackson.core:jackson-databind:2.14.2',
            'com.fasterxml.jackson.core:jackson-core:2.14.2',
            'org.aeonbits.owner:owner:1.0.12',
            'io.appium:java-client:8.5.0',
            "commons-io:commons-io:2.11.0",
            "org.slf4j:slf4j-simple:$slf4jVersion"
    )
}

test {
    useJUnitPlatform()
}
tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}
task android(type: Test) {
    useJUnitPlatform {
        includeTags("android")
    }
}

task regress(type: Test) {
    useJUnitPlatform {
        includeTags("regress")
    }
}

task remote(type: Test) {
    useJUnitPlatform {
        includeTags("remote")
    }
}

task new_test(type: Test) {
    useJUnitPlatform {
        includeTags("New")
    }
}
task ringtone(type: Test) {
    useJUnitPlatform {
        includeTags("Ringtone")
    }
}


